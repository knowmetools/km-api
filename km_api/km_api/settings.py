"""
Django settings for km_api project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


AWS_DEFAULT_REGION = os.environ.get("DJANGO_AWS_REGION", "us-east-1")


SENTRY_DSN = os.environ.get("DJANGO_SENTRY_DSN")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "False").lower() == "true"


# This should be overridden in production.
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", None)
if not SECRET_KEY and DEBUG:
    SECRET_KEY = "secret"

allowed_host_string = os.environ.get("DJANGO_ALLOWED_HOSTS", None)
ALLOWED_HOSTS = []

if allowed_host_string:
    ALLOWED_HOSTS = allowed_host_string.split(",")


# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "corsheaders",
    "django_filters",
    "dry_rest_permissions",
    "rest_email_auth",
    "rest_framework",
    "rest_framework.authtoken",
    "storages",
    "watson",
]

if SENTRY_DSN:
    THIRD_PARTY_APPS.append("raven.contrib.django.raven_compat")

CUSTOM_APPS = [
    "account",
    "custom_storages",
    "km_auth",
    "know_me",
    "know_me.journal",
    "know_me.profile",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + CUSTOM_APPS


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "km_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "email_templates", "dist")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "km_api.wsgi.application"


# Authentication configuration

AUTHENTICATION_BACKENDS = (
    "rest_email_auth.authentication.VerifiedEmailBackend",
)


# Custom user model

AUTH_USER_MODEL = "account.User"
DEFAULT_FROM_EMAIL = "Know Me <no-reply@knowmetools.com>"


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DB_HOST = os.environ.get("DJANGO_DB_HOST", "localhost")
DB_NAME = os.environ.get("DJANGO_DB_NAME")
DB_PASSWORD = os.environ.get("DJANGO_DB_PASSWORD")
DB_PORT = os.environ.get("DJANGO_DB_PORT", "5432")
DB_USER = os.environ.get("DJANGO_DB_USER")

if all((DB_HOST, DB_NAME, DB_PASSWORD, DB_PORT, DB_USER)):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "HOST": DB_HOST,
            "NAME": DB_NAME,
            "PASSWORD": DB_PASSWORD,
            "PORT": DB_PORT,
            "USER": DB_USER,
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"  # noqa
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"  # noqa
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"  # noqa
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"  # noqa
    },
]


# Email Configuration

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
if os.environ.get("DJANGO_SES_ENABLED", "False").lower() == "true":
    AWS_SES_REGION = os.environ.get(
        "DJANGO_SES_AWS_REGION", AWS_DEFAULT_REGION
    )
    EMAIL_BACKEND = "django_amazon_ses.EmailBackend"


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Media Files (User Uploaded)

MEDIA_ROOT = os.environ.get("DJANGO_MEDIA_ROOT")
MEDIA_URL = "/media/"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_ROOT = os.environ.get("DJANGO_STATIC_ROOT")
STATIC_URL = "/static/"


# File Storage

if os.environ.get("DJANGO_S3_STORAGE", "False").lower() == "true":
    DEFAULT_FILE_STORAGE = "custom_storages.backends.MediaStorage"
    STATICFILES_STORAGE = "custom_storages.backends.StaticStorage"

    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=31536000"}
    AWS_S3_REGION_NAME = os.environ.get(
        "DJANGO_S3_AWS_REGION", AWS_DEFAULT_REGION
    )  # noqa
    AWS_STORAGE_BUCKET_NAME = os.environ.get("DJANGO_S3_BUCKET")


if os.environ.get("DJANGO_IN_MEMORY_FILES", "False").lower() == "true":
    DEFAULT_FILE_STORAGE = "inmemorystorage.InMemoryStorage"


# Security Settings (HTTPS Related)

if os.environ.get("DJANGO_HTTPS", "False").lower() == "true":
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True

    # If Django is running behind a load balancer that terminates SSL we
    # can use the following header to determine if the original
    # connection came over HTTPS.
    if os.getenv("DJANGO_HTTPS_LOAD_BALANCER", "False").lower() == "true":
        SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# CORS Configurations
# https://github.com/ottoyiu/django-cors-headers#configuration

CORS_ORIGIN_ALLOW_ALL = True


# Apple Settings

km_premium_codes_str = os.getenv(
    "DJANGO_APPLE_PRODUCT_CODES_KNOW_ME_PREMIUM", ""
)
km_premium_codes = (
    km_premium_codes_str.split(",") if km_premium_codes_str else []
)
APPLE_PRODUCT_CODES = {"KNOW_ME_PREMIUM": km_premium_codes}

APPLE_RECEIPT_VALIDATION_ENDPOINT = os.environ.get(
    "DJANGO_APPLE_RECEIPT_VALIDATION_ENDPOINT",
    "https://sandbox.itunes.apple.com/verifyReceipt",
)
APPLE_SHARED_SECRET = os.getenv("DJANGO_APPLE_SHARED_SECRET", "")


# Raven (Sentry Logging)

RAVEN_CONFIG = {
    "dsn": SENTRY_DSN,
    "environment": os.environ.get("DJANGO_SENTRY_ENVIRONMENT", "default"),
    "release": "1.5.0",
}


# Rest Email Auth

REST_EMAIL_AUTH = {
    "EMAIL_VERIFICATION_PASSWORD_REQUIRED": False,
    "EMAIL_VERIFICATION_URL": os.environ.get(
        "DJANGO_EMAIL_VERIFICATION_URL", "https://example.com/verify/{key}"
    ),
    "PASSWORD_RESET_URL": os.environ.get(
        "DJANGO_PASSWORD_RESET_URL", "https://example.com/reset/{key}"
    ),
    "REGISTRATION_SERIALIZER": "account.serializers.RegistrationSerializer",
}


# Rest Framework
# http://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ),
    "PAGE_SIZE": 10,
}


# Logging Configuration

LOG_HANDLER_NAMES = ["console"]
LOG_HANDLERS = {
    "console": {"class": "logging.StreamHandler"},
    "null": {"class": "logging.NullHandler", "level": "DEBUG"},
}

if "raven.contrib.django.raven_compat" in INSTALLED_APPS:
    LOG_HANDLER_NAMES.append("sentry")
    LOG_HANDLERS["sentry"] = {
        "class": "raven.contrib.django.raven_compat.handlers.SentryHandler",
        "formatter": "standard",
        "level": "WARNING",
    }

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "datefmt": "%d/%b/%Y %H:%M:%S",
            "format": "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",  # noqa
        }
    },
    "handlers": LOG_HANDLERS,
    "loggers": {
        # Root Handler
        "": {"handlers": LOG_HANDLER_NAMES, "level": "WARNING"},
        # Customized Handlers
        "django.request": {"level": "ERROR", "propagate": True},
        "django.security.DisallowedHost": {
            "handlers": ["null"],
            "propagate": False,
        },
    },
}

LOGGING_CUSTOM_APPS = (
    "account",
    "custom_storages",
    "km_auth",
    "know_me",
    "permission_utils",
    "rest_order",
    "templated_email",
)

for app in LOGGING_CUSTOM_APPS:
    LOGGING["loggers"][app] = {
        "handlers": LOG_HANDLER_NAMES,
        "level": "INFO",
        "propagate": False,
    }
